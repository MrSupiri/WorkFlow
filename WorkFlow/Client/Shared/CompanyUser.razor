@inject IUser _userService
@inject INavService _navService

<div class="w-100 m-2 p-2 border border-black bg-white">
    @User.Name
    <button @onclick="RemoveUser" class="bg-red-500 text-white rounded-full h-6 px-3 float-right ml-3">Remove</button>
    <select value="@Role" @onchange="RoleChanged" class="w-18 text-gray-700 px-1 border border-gray-300 bg-white rounded-md shadow-sm focus:outline-none focus:ring-primary-500 focus:border-primary-500 mx-auto float-right">
        <option value="@UserRole.Admin">
            Admin
        </option>
        <option value="@UserRole.User">
            User
        </option>
    </select>
</div>

@code {

    [Parameter]
    public UserDto User { get; set; } = null!;

    [Parameter]
    public UserRole Role { get; set; } 
    
    [Parameter]
    public Guid CompanyId { get; set; }
    
    
    [CascadingParameter]
    public Toast? Toast { get; set; }
    
    private async void RoleChanged(ChangeEventArgs e)
    {
        try
        {
            var userCompany = await _userService.SetUserCompany(new UserInvite{CompanyId = CompanyId, Email = User.Email, Role = MapRole(e.Value!.ToString())});
            Toast?.AddNotification("Success", $"User ({userCompany.User.Name}) role was set to {e.Value}", "green");
        }
        catch (Exception err)
        {
            Toast?.Exception(err);
        }
    }

    private UserRole MapRole(string? role)
    {
        return role == "Admin" ? UserRole.Admin : UserRole.User;
    }
    
    private async void RemoveUser()
    {
        try
        {
            var userCompany = await _userService.SetUserCompany(new UserInvite{CompanyId = CompanyId, Email = User.Email, Role = null});
            Toast?.AddNotification("Success", $"User ({userCompany.User.Name}) was removed from the company", "yellow");
            _navService.Reload();
        }
        catch (Exception err)
        {
            Toast?.Exception(err);
        }
    }
}