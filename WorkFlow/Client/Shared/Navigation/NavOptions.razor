@inject NavigationManager _navigationManager
@inject INavService _navService
@implements IDisposable

@foreach (var option in Options)
{
    if (option.Selected)
    {
        <a class="text-black-900 block px-3 py-2 rounded-md text-base font-medium" href="@option.HrefWithCompany">
            @option.Name
        </a>
    }
    else
    {
        <a class="text-gray-500 hover:text-gray-800 block px-3 py-2 rounded-md text-base font-medium" href="@option.HrefWithCompany">
            @option.Name
        </a>
    }
}

@code {

    private NavRoutes[] Options { get; set; } = Array.Empty<NavRoutes>();


    private void UpdateUi()
    {
        Options = _navService.NavOptions;
        // var location = _navigationManager.ToBaseRelativePath(_navigationManager.Uri);

        for (var i = 0; i < Options.Length; i++)
        {
            Options[i].HrefWithCompany = Options[i].Href != "/" ? $"/{_navService.GetCurrentCompany().Uri}{Options[i].Href}" : "/";

            // if (location.EndsWith(Options[i].Href) || location.Split("/")[2] == Options[i].Href.Split("/")[1])
            //     Options[i].Selected = true;
            // else
            //     Options[i].Selected = false;
        }
        StateHasChanged();
    }

    private void UpdateUi(object? sender, LocationChangedEventArgs locationChangedEventArgs)
    {
        UpdateUi();
    }

    protected override void OnInitialized()
    {
        _navService.OnChange += UpdateUi;
        _navigationManager.LocationChanged += UpdateUi;
        UpdateUi();
    }

    public void Dispose()
    {
        _navService.OnChange -= UpdateUi;
        _navigationManager.LocationChanged -= UpdateUi;
    }

}